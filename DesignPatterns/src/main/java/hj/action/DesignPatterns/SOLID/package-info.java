/**
 * <p>Title : 设计模式六大原则</p>
 * <p>Description :
 *
 * Single Responsibility Principle：单一职责原则
 * Open Closed Principle：开闭原则
 * Liskov Substitution Principle：里氏替换原则
 * Law of Demeter：迪米特法则
 * Interface Segregation Principle：接口隔离原则
 * Dependence Inversion Principle：依赖倒置原则
 *
 * 把这六个原则的首字母联合起来（ L 算做一个）就是 SOLID （solid，稳定的），其代表的含义就是这六个原则结合使用的好处：建立稳定、灵活、健壮的设计
 *
 *
 *
 * 单一职责原则：
 *      一个方法一个类只负责一个职责，各个职责的程序改动，不影响其它程序。
 *
 * 开闭原则：
 *      软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的。
 *
 * 里氏替换原则：
 *      子类可以扩展父类的功能，但不能改变父类原有的功能。
 *      1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
 *      2、子类中可以增加自己特有的方法
 *      3、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
 *      4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
 *
 * 迪米特法则：
 *      迪米特法则又叫作最少知道原则，就是说一个对象应当对其他对象有尽可能少的了解。
 *      通俗的来讲，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供公共方法，不对外泄漏任何信息。
 *
 * 接口隔离原则：
 *      客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
 *
 * 依赖倒置原则：
 *      1、高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。
 *      2、抽象不应该依赖于具体实现，具体实现应该依赖于抽象。
 *
 * </p>
 * <p>Date : 2019-02-12 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.SOLID;