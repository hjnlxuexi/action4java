/**
 * <p>Title : 组合模式</p>
 * <p>Description :
 *
 *  组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。
 *  组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。
 *  模糊了简单元素和复杂元素的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。
 *
 *  叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和组合节点进行一致处理的原因。
 *
 *  结构：
 *      Component ：组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。
 *      Leaf：叶子对象。叶子结点没有子结点。
 *      Composite：容器对象，定义有枝节点行为，用来存储子部件，实现在Component接口中定义的与子部件有关操作，如增加(add)和删除(remove)等。
 *
 *
 *  优点：
 *      1、可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，使得增加新构件也更容易。
 *      2、客户端调用简单，客户端可以一致的使用组合结构或其中单个对象。
 *      3、定义了包含叶子对象和容器对象的类层次结构，叶子对象可以被组合成更复杂的容器对象，而这个容器对象又可以被组合，这样不断递归下去，可以形成复杂的树形结构。
 *      4、更容易在组合体内加入对象构件，客户端不必因为加入了新的对象构件而更改原有代码。
 *  缺点：
 *      1、使设计变得更加抽象，对象的业务规则如果很复杂，则实现组合模式具有很大挑战性，
 *      2、不是所有的方法都与叶子对象子类都有关联
 *
 *  适用场景：
 *      1、需要表示一个对象整体或部分层次，在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，可以一致地对待它们。
 *      2、让客户能够忽略不同对象层次的变化，客户端可以针对抽象构件编程，无须关心对象层次结构的细节。
 *
 * </p>
 * <p>Date : 2019-02-16 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Composite;