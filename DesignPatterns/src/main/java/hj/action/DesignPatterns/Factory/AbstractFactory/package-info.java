/**
 * <p>Title : 抽象工厂模式</p>
 * <p>Description :
 *
 *  产品等级结构：产品的等级结构也就是产品的继承结构。
 *
 *  产品族：产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。
 *
 *  定义：
 *      抽象工厂模式提供一个接口，用于创建相关或者依赖对象的家族，而不需要明确指定具体类。
 *      抽象工厂允许客户端使用抽象的接口来创建一组相关的产品，而不需要关系实际产出的具体产品是什么。这样一来，客户就可以从具体的产品中解耦。
 *
 *  =================================================================================================
 *  AbstractFactory：抽象工厂。
 *      抽象工厂定义了一个接口，所有的具体工厂都必须实现此接口，这个接口包含了一组方法用来生产产品。
 *  ConcreteFactory：具体工厂。
 *      具体工厂是用于生产不同产品族。要创建一个产品，客户只需要使用其中一个工厂完全不需要实例化任何产品对象。
 *  AbstractProduct：抽象产品。
 *      这是一个产品家族，每一个具体工厂都能够生产一整组产品。
 *  Product：具体产品。
 *
 *  =================================================================================================
 *  优点：
 *      1、抽象工厂隔离了具体类的生成，是的客户端不需要知道什么被创建。
 *          所有的具体工厂都实现了抽象工厂中定义的公共接口，因此只需要改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。
 *      2、当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。
 *  缺点：
 *      添加新的行为时比较麻烦。如果需要添加一个新产品族对象时，需要更改接口及其下所有子类，这必然会带来很大的麻烦。
 *
 *  =================================================================================================
 *  适用场景：
 *      1、一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。
 *      2、系统中有多于一个的产品族，而每次只使用其中某一产品族。
 *      3、属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。
 *      4、系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。
 *
 * </p>
 * <p>Date : 2019-02-13 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Factory.AbstractFactory;