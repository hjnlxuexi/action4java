/**
 * <p>Title : 静态工厂模式：简单工厂模式</p>
 * <p>Description :
 *
 *  简单工厂模式又称之为静态工厂方法，属于创建型模式。在简单工厂模式中，可以根据传递的参数不同，返回不同类的实例。
 *  简单工厂模式定义了一个类，这个类专门用于创建其他类的实例，这些被创建的类都有一个共同的父类。
 *  简单工厂模式将对象的创建和对象本身业务处理分离了，可以降低系统的耦合度，使得两者修改起来都相对容易些。当以后实现改变时，只需要修改工厂类即可。
 *
 *  =================================================================================================
 *  Factory：工厂角色。
 *      专门用于创建实例类的工厂，提供一个方法，该方法根据传递的参数不同返回不同类的具体实例。
 *  Product：抽象产品角色。为所有产品的父类。
 *  ConcreteProduct：具体的产品角色。
 *
 *  =================================================================================================
 *  优点：
 *      1、简单工厂模式实现了对责任的分割，提供了专门的工厂类用于创建对象。
 *      2、客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。
 *      3、通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。
 *
 *  缺点：
 *      1、由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。
 *      2、使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。
 *      3、系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
 *      4、简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。
 *
 *  =================================================================================================
 *  适用场景：
 *      1、工厂类负责创建的对象比较少。
 *      2、客户端只知道传入工厂类的参数，对于如何创建对象不关心。
 *
 * </p>
 * <p>Date : 2019-02-13 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Factory.SimpleFactory;