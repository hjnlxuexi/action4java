/**
 * <p>Title : 观察者模式</p>
 * <p>Description :
 *
 * 观察者模式：定义了对象之间的一对多依赖关系，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并且自动更新。
 *
 *  观察目标：被改变的对象。 ...1
 *      1、注册观察者
 *      2、移除观察者
 *      3、通知观察者
 *
 *  观察者：被通知的对象。   ...n
 *      接收通知消息，执行具体业务
 *
 * ================================================================
 * 优点：
 *      1、观察者模式提供了一种对象设计，让主题和观察者之间松耦合。
 *          主题所知道只是一个具体的观察者列表，每一个具体观察者都符合一个抽象观察者的接口。
 *          主题并不认识任何一个具体的观察者，它只知道他们都有一个共同的接口。
 *      2、观察者模式支持“广播通信”。主题会向所有的观察者发出通知。
 *      3、观察者模式符合“开闭原则”的要求。
 *
 * 缺点：
 *      1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。
 *      2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。
 *      3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。
 *
 * ================================================================
 * 使用场景：
 *      1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用
 *      2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
 *      3、一个对象必须通知其他对象，而并不知道这些对象是谁。
 *          需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。
 *
 *
 * </p>
 * <p>Date : 2019-02-12 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Observer;