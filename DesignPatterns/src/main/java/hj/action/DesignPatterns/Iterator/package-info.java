/**
 * <p>Title : 迭代器模式</p>
 * <p>Description :
 *
 *  迭代器模式：
 *      提供一种方法顺序访问一个集合对象中的各个元素，而不是暴露其内部的表示。
 *      功能：
 *          1、能够遍历一个集合对象
 *          2、我们不需要了解聚合对象的内部结构
 *          3、能够提供多种不同的遍历方式
 *      迭代器模式把在元素之间游走的责任交给迭代器，而不是集合对象
 *
 *
 *  ==========================================================================================================
 *  Iterator: 抽象迭代器。所有迭代器都需要实现的接口，提供了游走聚合对象元素之间的方法。
 *  ConcreteIterator: 具体迭代器。利用这个具体的迭代器能够对具体的聚合对象进行遍历。每一个聚合对象都应该对应一个具体的迭代器。
 *  Aggregate: 抽象聚合类。
 *  ConcreteAggregate: 具体聚合类。实现creatorIterator()方法，返回该聚合对象的迭代器。
 *
 *  ==========================================================================================================
 *  优点：
 *      1、它支持以不同的方式遍历一个聚合对象。
 *      2、迭代器简化了聚合类。
 *      3、在同一个聚合上可以有多个遍历。
 *      4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。
 *  缺点：
 *      由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。
 *
 *  ==========================================================================================================
 *  适用场景：
 *      1、访问一个聚合对象的内容而无须暴露它的内部表示。
 *      2、需要为聚合对象提供多种遍历方式。
 *      3、为遍历不同的聚合结构提供一个统一的接口。
 *
 * </p>
 * <p>Date : 2019-02-14 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Iterator;