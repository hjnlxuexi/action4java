/**
 * <p>Title : 命令模式</p>
 * <p>Description :
 *
 * 命令模式：
 *      命令模式可以将发送者、接受者完全解耦，发送者也接收者之间并没有直接的联系，发送者只需要知道如何发送请求，不需要关心请求是如何完成了。
 *      命令模式将方法调用给封装起来了。
 *      命令模式将请求封装成对象，使得请求参数化。
 *      命令模式支持可撤销的操作。
 *
 *      命令模式的本质就在于：将命令进行封装，将发出命令的责任和执行命令的责任分开，
 *          使得发送者只需要知道如何发送命令即可，不需要命令是如何实现的，甚至命令执行是否成功都不需要理会。
 *          同时命令模式使得请求也变成了一个对象，它像其他对象一样可以被存储和传递。
 *
 * ====================================================================================================
 *
 *  Command: 抽象命令类
 *  ConcreteCommand: 具体命令类
 *  Invoker: 调用者(命令发送者)
 *  Receiver: 接收者
 *  Client: 客户类
 *
 * ====================================================================================================
 * 优点：
 *      降低了系统耦合度。
 *      新的命令可以很容易添加到系统中去。
 *
 * 缺点：
 *      使用命令模式可能会导致某些系统有过多的具体命令类。
 *
 * ====================================================================================================
 * 适用场景：
 *      1、系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
 *      2、系统需要在不同的时间指定请求、将请求排队和执行请求。
 *      3、系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
 *      4、系统需要将一组操作组合在一起，即支持宏命令。
 *
 * </p>
 * <p>Date : 2019-02-14 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Command;