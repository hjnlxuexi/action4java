/**
 * <p>Title : 备忘录模式</p>
 * <p>Description :
 *
 *  备忘录模式是一种给我们的软件提供后悔药的机制，通过它可以使系统恢复到某一特定的历史状态。----存档
 *
 *  备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。
 *
 *
 *  Originator: 原发器。
 *      负责创建一个备忘录，用以记录当前对象的内部状态，也可以使用它来利用备忘录恢复内部状态。
 *      同时原发器还可以根据需要决定Memento存储Originator的那些内部状态。
 *  Memento: 备忘录。用于存储Originator的内部状态，并且可以防止Originator以外的对象访问Memento。
 *      在备忘录Memento中有两个接口，其中Caretaker只能看到备忘录中的窄接口，它只能将备忘录传递给其他对象。
 *      Originator可以看到宽接口，允许它访问返回到先前状态的所有数据。
 *  Caretaker: 负责人。负责保存好备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象。
 *
 *
 *  对备忘录的访问控制：
 *      对原发器：可以访问备忘录里的所有信息。
 *      对负责人：不可以访问备忘录里面的数据，但是他可以保存备忘录并且可以将备忘录传递给其他对象。
 *      其他对象：不可访问也不可以保存，它只负责接收从负责人那里传递过来的备忘录同时恢复原发器的状态。
 *
 *
 *  优点：
 *      1、给用户提供了一种可以恢复状态的机制。可以是用户能够比较方便地回到某个历史的状态。
 *      2、实现了信息的封装。使得用户不需要关心状态的保存细节。
 *  缺点：
 *      消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。
 *
 * </p>
 * <p>Date : 2019-02-20 </p>
 *
 * @author : hejie
 */
package hj.action.DesignPatterns.Memento;